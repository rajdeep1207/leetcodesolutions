/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list=new ArrayList<>();
        if(root==null) return list;
        Deque<TreeNode> q=new ArrayDeque<>();
        int level=0;
        q.offer(root);
        while(!q.isEmpty()){
            int size=q.size();
            List<Integer> inner=new ArrayList<>();
            while(size-- > 0){
                if(level%2==0){
                    TreeNode node=q.poll();
                    inner.add(node.val);
                    if(node.left!=null)
                        q.offer(node.left);
                    if(node.right!=null)
                        q.offer(node.right);
                }
                else{
                    TreeNode node=q.pollLast();
                    inner.add(node.val);
                    if(node.right!=null)
                        q.offerFirst(node.right);
                    if(node.left!=null)
                        q.offerFirst(node.left);
                }
            }
            level++;
            list.add(inner);
        }
        return list;
    }
}
