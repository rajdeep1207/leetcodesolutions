class Node{
    char letter;
    int count;
    public Node(char ch,int count){
        this.letter=ch;
        this.count=count;
    }
}
class Solution {
    public String removeDuplicates(String s, int k) {
        Deque<Node> stack=new ArrayDeque<>();
        for(char ch:s.toCharArray()){
            if(!stack.isEmpty() && stack.peekLast().letter==ch){
                if(stack.peekLast().count==k-1){
                    stack.pollLast();
                }
                else{
                    stack.peekLast().count=stack.peekLast().count+1;
                }
            }
            else{
                stack.offerLast(new Node(ch,1));
            }
        }
        
        StringBuilder s1=new StringBuilder();
        while(!stack.isEmpty()){
            Node node=stack.pollFirst();
            int count=node.count;
            char ch=node.letter;
            while(count-- > 0){
                s1.append(ch);
            }
        }
        return s1.toString();
    }
}
