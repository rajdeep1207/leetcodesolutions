class Solution {
    class TrieNode{
        boolean isWord;
        List<TrieNode> children=Arrays.asList(new TrieNode[26]);
    }
    TrieNode current,root;
    List<String> wordBuffer;
    Solution(){
        root=new TrieNode();
    }
    void insert(String word){
        current=root;
        for(char ch:word.toCharArray()){
            if(current.children.get(ch-'a')==null)
                current.children.set(ch-'a',new TrieNode());
            current=current.children.get(ch-'a');
        }
        current.isWord=true;
    }
    
    void dfsWord(TrieNode current,String prefix){
        if(wordBuffer.size()==3)
            return;
        if(current.isWord)
            wordBuffer.add(prefix);
        for(char c='a';c<='z';c++){
            if(current.children.get(c-'a')!=null)
                dfsWord(current.children.get(c-'a'),prefix+c);
        }
    }
    
    List<String> getWordsStartingWith(String prefix){
        current=root;
        wordBuffer=new ArrayList();
        for(char ch:prefix.toCharArray()){
            if(current.children.get(ch-'a')==null)
                return wordBuffer;
            current=current.children.get(ch-'a');
        }
        dfsWord(current,prefix);
        return wordBuffer;
    }
    
    public List<List<String>> suggestedProducts(String[] products, String searchWord) {
        List<List<String>> result=new ArrayList();
        for(String p:products)
            insert(p);
        String prefix="";
        for(char ch:searchWord.toCharArray())
            result.add(getWordsStartingWith(prefix+=ch));
        return result;
    }
}
