class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> words=new HashSet<>(wordList);
        if(!words.contains(endWord)) return 0;
        Queue<String> q=new LinkedList<>();
        int count=0;
        q.offer(beginWord);
        while(!q.isEmpty()){
            int size=q.size();
            count++;
            for(int i=0;i<size;i++){
                char[] currentword=q.poll().toCharArray();
                for(int j=0;j<currentword.length;j++){
                    char originalletter=currentword[j];
                    for(char ch='a';ch<='z';ch++){
                        currentword[j]=ch;
                        if(endWord.equals(String.valueOf(currentword))) return count+1;
                        else if(words.contains(String.valueOf(currentword))){
                            words.remove(String.valueOf(currentword));
                            q.offer(String.valueOf(currentword));
                        }
                    }
                    currentword[j]=originalletter;
                }
            }
        }
        return 0;
    }
}
