/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode currentA=headA;
        ListNode currentB=headB;
        int a=getLength(currentA);
        int b=getLength(currentB);
        if(a>b){
            headA=synchronizeHead(headA,a-b);
        }
        else{
            headB=synchronizeHead(headB,b-a);
        }
        while(headA!=null){
            if(headA==headB){
                return headA;
            }
            headA=headA.next;
            headB=headB.next;
        }
        return null;
    }
    
    public int getLength(ListNode node){
        int length=0;
        while(node!=null){
            length++;
            node=node.next;
        }
        return length;
    }
    public ListNode synchronizeHead(ListNode node,int diff){
        while(diff-- > 0){
            node=node.next;
        }
        return node;
    }
}
