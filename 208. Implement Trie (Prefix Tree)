class Trie {
    
    class TrieNode{
        boolean isEnd;
        TrieNode[] child=new TrieNode[26];
    }
    
    TrieNode root;

    /** Initialize your data structure here. */
    public Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        char[] ch=word.toCharArray();
        TrieNode tempnode=root;
        for(char c:ch){
            int index=c-'a';
            if(tempnode.child[index]==null)
                tempnode.child[index]=new TrieNode();
            tempnode=tempnode.child[index];
        }
        tempnode.isEnd=true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        char[] ch=word.toCharArray();
        TrieNode tempnode=root;
        for(char c:ch){
            int index=c-'a';
            if(tempnode.child[index]==null)
                return false;
            tempnode=tempnode.child[index];
        }
        if(tempnode!=null && tempnode.isEnd==false)
            return false;
        return true;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        char[] ch=prefix.toCharArray();
        TrieNode tempnode=root;
        for(char c:ch){
            int index=c-'a';
            if(tempnode.child[index]==null)
                return false;
            tempnode=tempnode.child[index];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
