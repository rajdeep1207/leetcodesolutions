/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    List<Integer> list=new ArrayList<>(); 
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        if(root==null) return list;
        list.add(root.val);
        calculateLeftBoundaries(root.left);
        printBoundaries(root);
        calculateRightBoundaries(root.right);
        return list;
    }
    public void calculateLeftBoundaries(TreeNode node){
        while(node!=null && (node.left!=null || node.right!=null)){
            list.add(node.val);
            if(node.left!=null)
                node=node.left;
            else
                node=node.right;
        }
    }
    public void printBoundaries(TreeNode node){
        if(node!=null && node.left==null && node.right==null)
            list.add(node.val);
        if(node.left!=null)
            printBoundaries(node.left);
        if(node.right!=null)
            printBoundaries(node.right);
    }
    public void calculateRightBoundaries(TreeNode node){
       Stack<Integer> stack=new Stack<>(); 
        while(node!=null && (node.left!=null || node.right!=null)){
            stack.push(node.val);
            if(node.right!=null)
                node=node.right;
            else
                node=node.left;
        }
        while(!stack.isEmpty()){
            list.add(stack.pop());
        }
    }
}
