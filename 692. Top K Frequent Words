class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        List<String> list=new LinkedList<>();
        Map<String,Integer> map=new HashMap<>();
        for(String word:words){
            map.put(word,map.getOrDefault(word,0)+1);
        }
        PriorityQueue<Map.Entry<String,Integer>> q=new PriorityQueue<>(
            (a,b) -> a.getValue()==b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue()-b.getValue());
        for(Map.Entry<String,Integer> entry : map.entrySet()){
            q.offer(entry);
            if(q.size()>k)
                q.poll();
        }
        while(!q.isEmpty()){
            list.add(0,q.poll().getKey());
        }
        return list;
    }
}
