/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<TreeNode,TreeNode> map=new HashMap<>();
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> res=new ArrayList<>();
        if(root==null) return res;
        Deque<TreeNode> q=new ArrayDeque<>();
        Set<Integer> visited=new HashSet<>();
        buildParentMap(root,root);
        q.offer(target);
        visited.add(target.val);
        int level=0;
        while(level<K){
            int size=q.size();
            while(size-- > 0){
                TreeNode temp=q.poll();
                if(temp.left!=null && visited.add(temp.left.val)){
                    q.offer(temp.left);
                }
                if(temp.right!=null && visited.add(temp.right.val)){
                    q.offer(temp.right);
                }
                TreeNode parent=map.get(temp);
                if(visited.add(parent.val)){
                    q.offer(parent);
                }
            }
            level++;
        }
        while(!q.isEmpty()){
            res.add(q.poll().val);
        }
        return res;
    }
    public void buildParentMap(TreeNode node,TreeNode parent){
        map.put(node,parent);
        if(node.left!=null){
            buildParentMap(node.left,node);
        }
        if(node.right!=null){
            buildParentMap(node.right,node);
        }
    }
}
